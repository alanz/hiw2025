#+Title: An alternative to CPP (HIW 2025)
#+Author: Alan Zimmerman
#+Email: @alanz@social.coop

#+OPTIONS: ^:nil
#+REVEAL_TITLE_SLIDE:
# #+REVEAL_SLIDE_FOOTER: Haskell Implementors' Workshop, ZuriHac 2025

#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5
#+OPTIONS: num:nil
#+OPTIONS: reveal_slide_number:c/t
# #+OPTIONS: toc:1
#+OPTIONS: toc:0

# 20 mins x 60 secs is 1200
#+OPTIONS: reveal_totaltime:1200

#+OPTIONS: reveal_center:nil
# #+REVEAL_THEME: simple
# #+REVEAL_THEME: white-contrast
#+REVEAL_THEME: white_contrast_compact_verbatim_headers
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
# #+REVEAL_PLUGINS: (markdown notes )
# #+REVEAL_PLUGINS: (markdown notes highlight toc-pogress)
# #+REVEAL_PLUGINS: (markdown notes highlight zoom)
#+REVEAL_PLUGINS: (markdown notes zoom)
#+REVEAL_EXTRA_CSS: ./local.css
#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
# #+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/github.css
#+PROPERTY: header-args    :results silent
#+PROPERTY: header-args    :exports code


#+ATTR_REVEAL: :reveal_slide_global_footer 'footer hello'

# ####################################################
# For TOC-progress, need in Reveal.initialize({
#
# // Optional libraries used to extend reveal.js
# dependencies: [
#     ..
#     { src: './reveal.js/plugin/toc-progress/toc-progress.js'
#       , async: true
#       , callback: function() { toc_progress.initialize(); toc_progress.create(); }
#     }
# ]
# });
# ####################################################

* An alternative to CPP

Alan Zimmerman

[[https://social.coop/@alanz][~@alanz@social.coop~]]

Haskell Implementors' Workshop,

ZuriHac, 2025-06-06

#+begin_notes
Hi, Alan Zimmerman, I look after ghc-exactprint.

And today I want to talk about CPP, which has pained me ever since I
started working on Haskell refactoring tools over ten years ago.
#+end_notes

* CPP

- In use from the beginning, at least GHC 2.0
- Used mainly to manage differences between versions
- Is outside the language of Haskell

#+begin_notes
The C preprocessor. Or C++ preprocessor.

My 5 min research shows it was in GHC 2 already, from 1997.
https://downloads.haskell.org/~ghc/old_docs/2.10/users_guide/user_33.html#IDX109
The docs are for 2.10, but the changelog back to 2.0 does not mention it being added.

Because it is outside the language, it can manage changes between
versions without itself being tripped up by syntax.

It runs using the generalised GHC capability to run a preprocessor
programme over the source

But is in a privileged position because it is deeply embedded in GHC
#+end_notes

* CPP Support in GHC

- CPP is an extension, which triggers all the machinery
  - See [[https://github.com/ghc/ghc/blob/b255a8ca815920f5219dd5136bbb505f684b7e26/compiler/GHC/SysTools/Cpp.hs#L49][Note [Preprocessing invocations]​]]
- GHC provides predefined macros describing the environment
  - Includes the [[https://github.com/ghc/ghc/blob/b255a8ca815920f5219dd5136bbb505f684b7e26/compiler/GHC/SysTools/Cpp.hs#L139][GHC version, operating system, word size]]
  - also versions of [[https://github.com/ghc/ghc/blob/b255a8ca815920f5219dd5136bbb505f684b7e26/compiler/GHC/SysTools/Cpp.hs#L183][all the packages configured in the project]], known
    to GHC when compiling a module
  - cabal also [[https://github.com/ghc/packages-Cabal/blob/6f22f2a789fa23edb210a2591d74ea6a5f767872/Cabal/Distribution/Simple/Build.hs#L698][emits a header file]] describing the environment it has
    configured.
- Even so, it is invoked as an external programme

#+begin_notes
#+end_notes

* Why is CPP a problem
- It does too much:
  - ✅ conditionally select code
  - ❌ continuation lines
  - ❌ arbitrary text replacement
  - ❌ include files

#+begin_notes
It does or can do too much.
- conditionally enable/disable blocks of code
- but also
  - combine lines using trailing backslash
  - process include files
  - arbitrary replacement of text using #define
- Breaks layering, making code hard(er) to understand

- The last items are just an annoyance when trying to understand code,
  but make any kind of tooling much more difficult to write
#+end_notes

* CPP and tooling
- Locations
- WYS ≠ WYG
- Comments

#+begin_notes
- This is my main beef
- The output of the preprocessor is different, by definition
  - So tying things back to original locations gets harder
- Especially with #define, an error message can refer to a location that makes no sense
  But it is sometimes useful, e.g. darcs has "gadts.h" defining macros for key types
  CHECK
- Comments are stripped, and / or mangled
  e.g. commented out CPP macros disappear
- Tools that want to round trip based on the AST do not see a
  representation of the original source
#+end_notes

* 🎉 GHC_CPP 🎉
- subset implementation of CPP inside GHC
- just enough to control conditional compilation
- tooling friendly

#+begin_notes
- Idea
- Only active in lines introduced with a `#` and preprocessor
  keyword.
- Tooling friendly, in that parts of the code disabled by the
  processor will be saved as comments, if comments are being
  processed.
#+end_notes

* GHC Proposal : Ghc CPP #616

[[./images-work/ghc-proposal-616.png]]

#+begin_notes
I was looking at my HEW talk from last year, and see I was pushing it
then already.
#+end_notes

* Goal : managing version changes
- Enough power to cover > 90% of current version change usage
- Drop-in replacement for the features it *does* support
- Pure, so no include files
- Strictly limited scope, only applies in lines starting `#`

#+begin_notes
Goal is managing unavoidable compatibility issues

Haskell has powerful abstraction mechanisms that can cover a lot of
cases, such as patterns

But some changes are unavoidable

*Not* intended as a complete replacement. There will always be cases
where it must be used, either for legacy codebases or constrained
environments, such as FFI.

Interesting note, the `#` *has* to start against the margin, else it can
conflict with overloaded record labels
#+end_notes


* Implementation : Big picture
- Modify lexer to include tokens for preprocessor directives
- Add a preprocessing step between the lexer and parser
- Profit
#+begin_notes
- Tokens starting # and a keyword, and their continuations
- Also provide a cppignore token, which is basically a kind of comment
- Preprocessing step accumulates a full directive, and processes it,
  if extension enabled
  - Otherwise a straight pass-through
  - Unless we are in a cpp disabled zone, where the contents are
    passed as cppignore tokens, one per line
  - I Considered passing actual tokens, but
    - there is no guarantee it will be valid haskell
    - managing layout state makes it complex
#+end_notes

* Basis : CPP Spec
I worked from an [[https://timsong-cpp.github.io/cppwp/n4140][online version]] at
https://timsong-cpp.github.io/cppwp/n4140/

#+begin_notes
Processing pipeline for directives only includes
- tokenisation and line combination, comment removal, flatten repeated
  spaces, add a space between each
#+end_notes

* What features
- "bare minimum"
- Only process lines starting #, or continuation of one starting #
- conditionals:
  - if variants
  - elif else end
- define, undef
- error, currently ignored, could easily emit a diagnostic
- No #, ##
- No #include, keeps parser/lexer pure.
  And not necessary.
  - perhaps stlyised version of machdeps

* Usage scenario 1 : CPP alternative
- Explicit usage instead of CPP
#+begin_src haskell
{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ >= VERSION_WITH_GHCCPP
{-# LANGUAGE GHC_CPP #-}
#endif
#+end_src
- Configured so that the CPP pragma is actually GHC_CPP, for supported
  compilers

- Possible make it ambient enabled

#+begin_notes
The usage "normal" developers see
#+end_notes

* Complication: Line pragmas

- GHC Lexer.x already processes these natively
- Tooling Problem
  - Swallows the original
  - Location changes

#+begin_notes
- The intent is that the location changes, but that makes exact printing unreliable
- Maybe use the PsSpan instead and allow changes
- Currently in GHC_CPP mode these become comments instead
#+end_notes

* Usage scenario 2 : Code modification
- skip/ignore unprocessed pragmas
- Turn line pragmas into comments
  - means we can trust the lines for relative positioning

#+begin_notes
My primary motivation
#+end_notes

* Experience report : hackage roundtrip
- download all of hackage as at Mar 16
- cleanup whitespace, line endings
- do a run, patch
  - add missing pragmas
    - from cabal files
    - for changes in GHC, e.g. src_haskell{NonDecreasingIndent}
  - minor edits for language changes
    - " @ " -> "@"
    - "! @ -> "!"
* ghc-exactprint tweaks
- always allow src_haskell{JavaScriptFFI}
- hard-code usage of GHC_CPP
- preset unit env macros to all of hackage

* Results of ghc-exactprint
- 204,566  files processed.
- 508 could not be processed by GHC_CPP (0.25%)
   32 used #include
  385 used #define
   58 CPP-style comments
   21 line concatenation
   12 inadequate context emulation
      MIN_VERSION_xxx
      MIN_TOOL_VERSION_xx

#+begin_notes
- Total hackage download is 235k files, did not have time to scrub the last ones
#+end_notes

* caveats
- This measures ability to correctly parse a file, and round trip it
- does not compare the resulting AST's from CPP and GHC_CPP
  - i.e. does not explicitly check the fidelity of evaluating
    conditionals
  - could be done easily enough as we compare original vs ppr versions

* End

This presentation: https://alanz.github.io/h1w2025/
[[./images-work/hiw2025-url.png]]
- [[https://github.com/ghc-proposals/ghc-proposals/pull/616][GHC CPP proposal]]
- GHC feature branch: https://gitlab.haskell.org/ghc/ghc/-/tree/wip/az/ghc-cpp
- Matching ghc-exactprint: https://github.com/alanz/ghc-exactprint/tree/ghc_cpp

- Slides written in emacs [[https://orgmode.org/][org-mode]] using [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]] for [[https://revealjs.com/][reveal.js]] 

Questions?
* Unused Stuff
** CPP anti-features
- #define
- include files
- Not aware of GHC comments
- Is aware of CPP-style comments
- continuation lines

Maybe
- line pragmas
But useful for generated code, a definite use-case
HOWEVER, there is a haskell-specific syntax for that already

#+begin_notes
#define that escapes the bounds of CPP directives, that is.

These issues are more important from the perspective of tool writers
#define: darcs has a file gadts.h defining stuff for use with and without them
#+end_notes

** Why
- tooling

#+begin_notes
I look after ghc-exactprint, a library to allow changes to the GHC
parsed ast, and print it back to source.
This is difficult or impossible with the current preprocessor
implementation.
#+end_notes

*** tooling
**** ghc-exactprint
- Difficult to manage the pieces, especially the anti-features
**** retrie
Works with all expansions of CPP options for a file
**** ormolu
Need to check what it does
https://github.com/tweag/ormolu/blob/master/DESIGN.md#cpp

#+begin_quote
If CPP is replaced with some language extension or mechanism to do
conditional compilation, all tools will benefit from it.
#+end_quote
*** tooling recap
Every tool is doing its own best to cope with it
*** simplification

** Notes
- note: two phases: get pragmas, and do parse
- preset macros
  - Based on existing CPP pipeline in GHC, but not written to a file
    - GHC version etc
    - Also based on Unit Env
- possible optimisation, as used in ghc-exactprint
  load pre-processed macros for a project
** Dealing with "off" sections
- considered emitting tokens
- switched to making it a comment
  - whitespace ALR rule complexity
  - By definition "off" stuff can be anything
    e.g. #if 0, some random chunk of text
** CPP-style comments
  - can possibly enable them when starting against the left margin, only
    - but prefer to ban them, we have comment syntax
** Subset
Barest subset of evaluation
